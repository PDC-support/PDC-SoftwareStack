Use python3 and matplotlib>=3.8 for GraPhlAn
authors: @ljmciver (https://github.com/biobakery/graphlan/pull/3) and Alexandre Detiste (https://github.com/biobakery/graphlan/pull/14)
modified for PDC (and easybuild) by Karl Johan Westrin
diff -ruN graphlan.orig/graphlan_annotate.py graphlan/graphlan_annotate.py
--- graphlan.orig/graphlan_annotate.py	2025-01-22 11:01:17.661718004 +0100
+++ graphlan/graphlan_annotate.py	2025-01-22 11:04:38.548386057 +0100
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 #------------------------------------------------------------------------------
 # NAME: graphlan_annotate.py
@@ -17,10 +17,6 @@
 
 import sys
 
-if sys.version_info[0] > 2:
-    raise Exception("GraPhlAn requires Python 2, your current Python version is {}.{}.{}"
-                    .format(sys.version_info[0], sys.version_info[1], sys.version_info[2]))
-
 from sys import argv
 from argparse import ArgumentParser
 from src.graphlan_lib import CircTree as CTree
@@ -61,3 +57,6 @@
     ctree = CTree( args['intree'] )
     ctree.annotate( args['annot'], args['outtree'] if args['outtree'] else args['intree'] ) # ,
     #                c = args['c'], p = args['p'], v = args['v']) 
+
+if __name__ == "__main__":
+    main()
diff -ruN graphlan.orig/graphlan.py graphlan/graphlan.py
--- graphlan.orig/graphlan.py	2025-01-22 11:01:17.661718004 +0100
+++ graphlan/graphlan.py	2025-01-22 11:04:44.891719436 +0100
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 #------------------------------------------------------------------------------
 # NAME: graphlan.py
@@ -20,10 +20,6 @@
 
 import sys
 
-if sys.version_info[0] > 2:
-    raise Exception("GraPhlAn requires Python 2, your current Python version is {}.{}.{}"
-                    .format(sys.version_info[0], sys.version_info[1], sys.version_info[2]))
-
 from sys import argv
 from argparse import ArgumentParser
 from src.graphlan_lib import CircTree as CTree
@@ -77,3 +73,6 @@
                out_pad=args['pad'],
                external_legends=args['external_legends'],
                reorder_tree=args['avoid_reordering'])
+
+if __name__ == "__main__":
+    main()
diff -ruN graphlan.orig/src/graphlan_lib.py graphlan/src/graphlan_lib.py
--- graphlan.orig/src/graphlan_lib.py	2025-01-22 11:01:17.681718004 +0100
+++ graphlan/src/graphlan_lib.py	2025-01-22 11:05:23.265053035 +0100
@@ -1,9 +1,5 @@
 import sys
 
-if sys.version_info[0] > 2:
-    raise Exception("GraPhlAn requires Python 2, your current Python version is {}.{}.{}"
-                    .format(sys.version_info[0], sys.version_info[1], sys.version_info[2]))
-
 from Bio import Phylo
 from Bio.Phylo import PhyloXML
 from Bio.Phylo import PhyloXMLIO
@@ -25,7 +21,7 @@
 matplotlib.use('Agg')
 matplotlib.rcParams['svg.fonttype'] = 'none'
 from pylab import *
-from pyphlan import PpaTree
+from .pyphlan import PpaTree
 
 
 clade_attr = ( ( 'clade_marker_size',                float, 20.0      ),
@@ -96,7 +92,7 @@
              ( 'keys',                             str,   "?"  ) )
 
 lev_sep = '.'
-legal_options = set(zip(*clade_attr+ext_attr+int_attr+structural_attr+global_graphical_attr+branch_attr+leg_attr)[0]) | set(['class'])
+legal_options = set(list(zip(*clade_attr+ext_attr+int_attr+structural_attr+global_graphical_attr+branch_attr+leg_attr))[0]) | set(['class'])
 
 def random_keys(used_keys):
     n = 1
@@ -167,7 +163,7 @@
                         ilev = int(lev)
                     except:
                         print(line)
-                        asdasdasd
+                        raise
 
                     if prop not in gprops:
                         gprops[prop] = {}
@@ -216,16 +212,16 @@
                         ilev = int(lev)
                     except:
                         print(line)
-                        asdasdasd
+                        raise
 
                     self._tmp_levs.add( ilev )
                     if prop in props[clade]:
-                        # print "clade", clade
-                        # print "prop", prop
-                        # print "props[clade]", props[clade]
-                        # print "val", val
-                        # print "ilev", ilev
-                        # print
+                        # print("clade", clade)
+                        # print("prop", prop)
+                        # print("props[clade]", props[clade])
+                        # print("val", val)
+                        # print("ilev", ilev)
+                        # print()
 
                         props[clade][prop][ilev] = val
                     else:
@@ -235,11 +231,11 @@
                     if ilev not in gprops[prop]:
                         gprops[prop][ilev] = ext_attr_d[prop][1]
                 else:
-                    # print ll
-                    # print clade.split(lev_sep)[-1]
-                    # print clade_names
-                    # print line
                     sys.stderr.write( "Classes not implemented for external annotations\n" )
+                    # print(ll)
+                    # print(clade.split(lev_sep)[-1])
+                    # print(clade_names)
+                    print(line)
                     exit(1)
 
 
@@ -274,11 +270,11 @@
                                     kkk,vvv = v.split(":")
                                 except:
                                     print(v)
-                                    asdasdasd
+                                    raise
 
                                 if kkk == '*':
                                     if fn is None:
-                                        kkk = rkeys_gen.next()
+                                        kkk = next(rkeys_gen)
                                     else:
                                         kkk = fn
                                     fn = kkk
@@ -706,30 +702,30 @@
 
     def set_wings( self ):
         if not self._wing_levs:
-            # print "not self._wing_levs", not self._wing_levs
+            # print("not self._wing_levs", not self._wing_levs)
 
             self._wing_tot_offset = 1.0 # self._max_depth
             self._tot_offset = 1.0
             return
 
         if self.ignore_branch_len:
-            # print "self.ignore_branch_len", self.ignore_branch_len
+            # print("self.ignore_branch_len", self.ignore_branch_len)
 
             self._wing_levs.sort(reverse=True)
             nlevs = len(self._wing_levs)
             minl, maxl = min(self._wing_levs), max(self._wing_levs)
 
-            # print "nlevs", nlevs
-            # print "minl", minl
-            # print "maxl", maxl
+            # print("nlevs", nlevs)
+            # print("minl", minl)
+            # print("maxl", maxl)
 
         lthetas = [l.theta for l in self.tree.get_terminals()]
         rad_offset = self.annotation_background_separation
         lev_width = self.annotation_background_width
 
-        # print "lthetas", lthetas
-        # print "rad_offset", rad_offset
-        # print "lev_width", lev_width
+        # print("lthetas", lthetas)
+        # print("rad_offset", rad_offset)
+        # print("lev_width", lev_width)
 
         def set_wings_rec( clade ):
             if hasattr(clade, 'annotation') and not hasattr(clade, 'annotation_background_color'):
@@ -740,13 +736,13 @@
 
             if hasattr(clade, 'annotation_background_color'):
                 if clade.is_terminal(): # same as non-terminal ??
-                    # print "clade.theta", clade.theta
-                    # print ''
-                    # print "clade.pc", clade.pc
-                    # print "clade.nc", clade.nc
-                    # print ''
-                    # print "clade.pc.theta", clade.pc.theta
-                    # print "clade.nc.theta", clade.nc.theta
+                    # print("clade.theta", clade.theta)
+                    # print()
+                    # print("clade.pc", clade.pc)
+                    # print("clade.nc", clade.nc)
+                    # print()
+                    # print("clade.pc.theta", clade.pc.theta)
+                    # print("clade.nc.theta", clade.nc.theta)
 
                     cpc = clade.theta + (clade.theta-clade.nc.theta) if clade.pc is None else clade.pc.theta
                     cnc = clade.theta - (clade.pc.theta-clade.theta) if clade.nc is None else clade.nc.theta
@@ -760,17 +756,17 @@
                     lsm = (clade.theta + cpc) * 0.5
                     lgr = (clade.theta + cnc) * 0.5
                 else:
-                    # print "clade.fc.pc", clade.fc.pc
-                    # print "clade.lc.nc", clade.lc.nc
-                    # print ''
-                    # print "clade.fc.theta", clade.fc.theta
-                    # print "clade.lc.theta", clade.lc.theta
-                    # print ''
-                    # print "clade.fc.pc.theta", clade.fc.pc.theta
-                    # print "clade.fc.nc.theta", clade.fc.nc.theta
-                    # print ''
-                    # print "clade.lc.pc.theta", clade.lc.pc.theta
-                    # print "clade.lc.nc.theta", clade.lc.nc.theta
+                    # print("clade.fc.pc", clade.fc.pc)
+                    # print("clade.lc.nc", clade.lc.nc)
+                    # print()
+                    # print("clade.fc.theta", clade.fc.theta)
+                    # print("clade.lc.theta", clade.lc.theta)
+                    # print()
+                    # print("clade.fc.pc.theta", clade.fc.pc.theta)
+                    # print("clade.fc.nc.theta", clade.fc.nc.theta)
+                    # print()
+                    # print("clade.lc.pc.theta", clade.lc.pc.theta)
+                    # print("clade.lc.nc.theta", clade.lc.nc.theta)
 
                     f, t = clade.fc.theta, clade.fc.pc.theta if clade.fc.pc else clade.fc.nc.theta
                     cpc = min(abs(f-t), abs(f+rpi2-t), abs(t+rpi2-f))
@@ -780,11 +776,11 @@
                     lsm = clade.fc.theta - cpc * 0.5
                     lgr = clade.lc.theta + cnc * 0.5
 
-                # print ''
-                # print "cpc", cpc
-                # print "cnc", cnc
-                # print "lsm", lsm
-                # print "lgr", lgr
+                # print()
+                # print("cpc", cpc)
+                # print("cnc", cnc)
+                # print("lsm", lsm)
+                # print("lgr", lgr)
 
                 self._wing_thetas.append(lsm)
 
@@ -793,12 +789,12 @@
                 else:
                     rad = (1.0 - clade.r) + lev_width
 
-                # print "rad", rad
+                # print("rad", rad)
 
                 self._wing_radii.append(rad + rad_offset)
                 width = abs(lgr - lsm)
 
-                # print "width", width
+                # print("width", width)
 
                 self._wing_widths.append(width)
                 self._wing_bottoms.append(clade.r)
@@ -808,9 +804,9 @@
                     self._wing_tot_offset = clade.r + rad + rad_offset
                     self._tot_offset = self._wing_tot_offset
 
-                    # print ''
-                    # print "self._wing_tot_offset", self._wing_tot_offset
-                    # print "self._tot_offset", self._tot_offset
+                    # print()
+                    # print("self._wing_tot_offset", self._wing_tot_offset)
+                    # print("self._tot_offset", self._tot_offset)
 
                 if hasattr( clade, 'annotation') and clade.annotation:
                     lab, ext_key = clade.annotation, None
@@ -834,14 +830,14 @@
                     else:
                         rad = 1.0 + lev_width * fract
 
-                    # print "rad", rad
+                    # print("rad", rad)
 
                     self._label_r.append( rad + rad_offset )
                     rot = avgtheta * 180.0 / rpi + 90.0 if rpi < clade.theta%rpi2 < rpi2 else avgtheta * 180.0 / rpi - 90.0
                     rot = (rot + 360.0) % 360.0 + 1e-10
                     rot = -rot if rot90 else rot
 
-                    # print "rot", rot
+                    # print("rot", rot)
 
                     self._label_rot.append( rot )
                     lfs = clade.annotation_font_size if hasattr(clade,"annotation_font_size") else self.default_annotation_font_size
@@ -1107,7 +1103,7 @@
                 ax = fig_annot.add_subplot(111, frame_on=False, xticks=[], yticks=[])
 
             ll = [ax.scatter(0.0, 0.0, s=0.0)] * len(self._ext_key)
-            plt.figlegend(ll, sorted(self._ext_key), 'upper left', frameon=False,
+            plt.figlegend(ll, sorted(self._ext_key), loc='upper left', frameon=False,
                 shadow=False, scatterpoints=1, handlelength=0, markerscale=0.0,
                 handletextpad=0.2, ncol=1, labelspacing=0.1,
                 prop={'size': self.annotation_legend_font_size})
@@ -1122,7 +1118,7 @@
                     bbox_extra_artists=handles, pad_inches=out_pad, format=out_format)
                 plt.close()
         # else:
-        #     print '[w] External annotation not created, no annotated labels!'
+        #     print('[w] External annotation not created, no annotated labels!')
 
         if external_legends:
             if labels: # need to check if there are annotated labels!
@@ -1134,7 +1130,7 @@
                 print('[w] External legend not created, no annotated labels!')
 
         if labels:
-            plt.figlegend(handles, labels, loc, labelspacing=0.1, frameon=False,
+            plt.figlegend(handles, labels, loc=loc, labelspacing=0.1, frameon=False,
                 markerscale=self.class_legend_marker_size, scatterpoints=1,
                 handletextpad=0.2, prop={'size': self.class_legend_font_size})
 
