make it possible to request a minor version of 0 and to request a major version number of the database.
author: Karl Johan Westrin (PDC KTH)
diff -ruN bakta.orig/bakta/db.py bakta/bakta/db.py
--- bakta.orig/bakta/db.py	2025-02-14 17:17:30.204093059 +0100
+++ bakta/bakta/db.py	2025-02-14 17:20:31.867422946 +0100
@@ -158,7 +158,8 @@
 
     parser_download = subparsers.add_parser('download', help='Download a database')  # add download sub-command options
     parser_download.add_argument('--output', '-o', action='store', default=Path.cwd(), help='output directory (default = current working directory)')
-    parser_download.add_argument('--minor', '-n', action='store', type=int, default=0, help='Database minor version (default = most recent db minor version)')
+    parser_download.add_argument('--minor', '-n', action='store', type=int, default=-1, help='Database minor version (default = most recent db minor version)')
+    parser_download.add_argument('--major', '-N', action='store', type=int, default=-1, help='Database major version (default = most recent db major version)')
     parser_download.add_argument('--type', choices=['full', 'light'], default='full', help='Database type (defaut = full)')
 
     parser_update = subparsers.add_parser('update', help='Update an existing database to the most recent compatible version')  # add download sub-command options
@@ -194,9 +195,9 @@
             print(f'\t... compatible DB versions: {len(compatible_versions)}')
 
         required_version = None
-        if(args.minor > 0):
+        if(args.minor >= 0 or args.major >= 0):
             for v in versions:
-                if(v['minor'] == args.minor):
+                if((v['minor'] == args.minor or args.minor==-1) and (v['major'] == args.major or args.major==-1)):
                     required_version = v
                     break
             if(required_version is None):
