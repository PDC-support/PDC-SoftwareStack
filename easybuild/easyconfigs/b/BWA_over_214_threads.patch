make possible to use more than 214 threads (the upper limit with this patch would be 429 threads)
author: Karl Johan Westrin
diff -ruN bwa.orig/bwa.c bwa/bwa.c
--- bwa.orig/bwa.c	2024-09-27 14:46:58.023774335 +0200
+++ bwa/bwa.c	2024-09-27 14:56:56.610429441 +0200
@@ -76,10 +76,10 @@
 	s->l_seq = ks->seq.l;
 }
 
-bseq1_t *bseq_read(int chunk_size, int *n_, void *ks1_, void *ks2_)
+bseq1_t *bseq_read(unsigned int chunk_size, int *n_, void *ks1_, void *ks2_)
 {
 	kseq_t *ks = (kseq_t*)ks1_, *ks2 = (kseq_t*)ks2_;
-	int size = 0, m, n;
+	unsigned int size = 0; int m, n;
 	bseq1_t *seqs;
 	m = n = 0; seqs = 0;
 	while (kseq_read(ks) >= 0) {
diff -ruN bwa.orig/bwa.h bwa/bwa.h
--- bwa.orig/bwa.h	2024-09-27 14:46:58.023774335 +0200
+++ bwa/bwa.h	2024-09-27 15:00:36.327091862 +0200
@@ -67,7 +67,7 @@
 extern "C" {
 #endif
 
-	bseq1_t *bseq_read(int chunk_size, int *n_, void *ks1_, void *ks2_);
+	bseq1_t *bseq_read(unsigned int chunk_size, int *n_, void *ks1_, void *ks2_);
 	void bseq_classify(int n, bseq1_t *seqs, int m[2], bseq1_t *sep[2]);
 
 	void bwa_fill_scmat(int a, int b, int8_t mat[25]);
diff -ruN bwa.orig/fastmap.c bwa/fastmap.c
--- bwa.orig/fastmap.c	2024-09-27 14:46:58.030441001 +0200
+++ bwa/fastmap.c	2024-09-27 16:06:37.433682429 +0200
@@ -142,7 +142,7 @@
 {
 	mem_opt_t *opt, opt0;
 	int fd, fd2, i, c, ignore_alt = 0, no_mt_io = 0;
-	int fixed_chunk_size = -1;
+	unsigned int fixed_chunk_size = 0;
 	gzFile fp, fp2 = 0;
 	char *p, *rg_line = 0, *hdr_line = 0;
 	const char *mode = 0;
